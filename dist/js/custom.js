document.addEventListener("DOMContentLoaded",(()=>{})),window.onload=()=>{$(".js-projects-slider").each(((e,s)=>{let t=$(s).next().find(".js-projects-slider-qty");$(s).on("init reInit afterChange",(function(e,s,o,r){let i=(o||0)+1;t.html(i+'/<span class="projects__slider-qty_sm">'+s.slideCount+"</span>")}));let o=$(s).next().find(".js-projects-slider-arrow-prev"),r=$(s).next().find(".js-projects-slider-arrow-next");$(s).slick({autoplay:!1,dots:!1,nextArrow:r,prevArrow:o})})),$(".js-stories-slider").slick({slidesToShow:6,slidesToScroll:1,mobileFirst:!0,responsive:[{breakpoint:1180,settings:{slidesToShow:6}},{breakpoint:650,settings:{slidesToShow:4}},{breakpoint:450,settings:{slidesToShow:3}},{breakpoint:320,settings:{slidesToShow:2}}]}),$(".js-mask-phone").mask("+38 099 999 99 99"),(()=>{const e=document.querySelectorAll(".js-form-tabs-list-item-header"),s=(document.querySelectorAll(".js-form-tabs-list-item-header-icon"),document.querySelectorAll(".js-form-tabs-list-item-footer"));for(let t=0;t<e.length;t++)e[t].addEventListener("click",(o=>{for(let s=0;s<e.length;s++)e[s].getElementsByClassName("js-form-tabs-list-item-header-icon")[0].classList.remove("js-active");e[t].getElementsByClassName("js-form-tabs-list-item-header-icon")[0].classList.add("js-active");for(let e=0;e<s.length;e++)s[e].classList.remove("js-active");s[t].classList.add("js-active")}))})(),(()=>{const e=document.querySelector(".js-popup-main-open"),s=document.querySelector(".js-popup-main-close"),t=document.querySelector(".js-popup-main");e.addEventListener("click",(e=>{t.classList.add("js-active"),document.body.classList.add("modal-open")})),s.addEventListener("click",(e=>{t.classList.remove("js-active"),document.body.classList.remove("modal-open")}))})(),(()=>{const e=document.querySelectorAll(".js-stories-for-popup-container"),s=document.querySelector(".js-popup-secondary-close"),t=document.querySelector(".js-popup-secondary");for(let s=0;s<e.length;s++)e[s].addEventListener("click",(e=>{let s="";if(e.target.closest(".js-stories-for-popup-item")){const o=e.target.closest(".js-stories-for-popup-item"),r=o.querySelector(".js-stories-for-popup-item-header").innerHTML,i=o.dataset.img&&o.dataset.img,l=o.dataset.text&&o.dataset.text,n=i.split(",");let d='<ul class="slider owl-carousel js-slider">';for(let e=0;e<n.length;e++)d+=`<li class="slider__item">\n                                       <div class="slider__item-inner">\n                                          <img class="stories__popup-img" src="${n[e]}"/>\n                                       </div>\n                                 </li>`;d+="</ul>",n.length>1&&(d+='<div class="projects__slider-arrows">\n                                       <button class="projects__slider-arrow projects__slider-arrow-prev js-slider-arrow-prev">&lsaquo;</button>\n                                       <div class="projects__slider-qty js-slider-qty"></div>\n                                       <button class="projects__slider-arrow projects__slider-arrow-next js-slider-arrow-next">&rsaquo;</button>\n                                    </div>'),s=`<div class="stories__popup-content">\n                  <div class="stories__popup-img-wrap">\n                     ${d}\n                  </div>\n                  <div class="stories__popup-text-wrap">\n                     ${r}\n\n                     <div class="stories__popup-descr">\n                        <p class="stories__descr">\n                           ${l}\n                        </p>\n                     </div>\n                  </div>\n               </div>`,t.querySelector(".js-popup-secondary-content").innerHTML=s,t.classList.add("js-active"),document.body.classList.add("modal-open");let a=$(".js-slider").next().find(".js-slider-qty");$(".js-slider").on("init reInit afterChange",(function(e,s,t,o){let r=(t||0)+1;a.html(r+'/<span class="projects__slider-qty_sm">'+s.slideCount+"</span>")}));let c=$(".js-slider").next().find(".js-slider-arrow-prev"),p=$(".js-slider").next().find(".js-slider-arrow-next");$(".js-slider").slick({autoplay:!1,dots:!1,nextArrow:p,prevArrow:c})}}));s.addEventListener("click",(e=>{t.classList.remove("js-active"),t.querySelector(".js-popup-secondary-content").innerHTML="",document.body.classList.remove("modal-open"),$(".js-slider").slick("unslick")}))})()};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
